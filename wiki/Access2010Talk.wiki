#Notes from the Access 2010 talk on Linked Data

= Introduction =

Instructions on how to build a simple Linked Data system for records in a directory.


= Prerequisites =

JDK 1.6 or higher (_might_ work with 1.5)
Tomcat 5 or 6 (I've not tried 7 yet)
Ant 1.7 or higher
Subversion client

= Instructions =
== Download oclcsrw, build and deploy ==
  svn checkout http://oclcsrw.googlecode.com/svn/trunk/ oclcsrw<br/>
  cd oclcsrw<br/>
  ant<br/>
  cp dist/SRW.war `<tomcat>`/webapps<br/>

  Bounce your tomcat.  If everything has worked right, then this URL should get you our trivial SRU interface to date faux database that returns the same record no matter what search you do. http://localhost:8080/SRW/search/test (Adjust the port number as necessary if you did not accept the default tomcat port of 8080.)

== Bring up database ==
  Put some MarcXML records in a directory.  (The service will work with any XML, but I'm using MarcXML for this demonstration.)  I got some LCNAF records from this SRW server: http://alcme.oclc.org/srw/search/lcnaf.  Search for something amusing (I used my last name).  If you do a "view source" on the response, you'll see MarcXML records in the response.  Cut out individual records from that response and store them as separate files in the directory you picked.  Choose some content in the record to be used as the filename.  That filename (with suitable filtering) will become the URI for the record, so choose wisely.  I chose the LCCN in the 010$a field. (You can just download the two records I stored on `GoogleCode` if the above seems too complicated right now.)<br/>

  Download the SRWFileSystemDatabase.template.SRWDatabase.props file into the directory with your XML records.  Rename the database SRWDatabase.props.  Adjust the filenameFilter to only select your XML files from the directory.<br/>
  Edit `<tomcat>`/webapps/SRW/WEB-INF/classes/SRWServer.props.  Uncomment the three lines for the SRWFileSystemDatabase.  To change the database name, change the second part of the property name (e.g. change 'lcnaf' to '`MyTest`').  Change the location of the database home to point at the directory with your records and SRWDatabase.props.<br/>

  Bounce your tomcat and try http://localhost:8080/SRW/search/lcnaf (adjusted appropriately for your environment.)  If you select "identifier" from the pulldown list under "Browse" and then click the "Browse" button, you should see a list of your XML file names.  Click on one and you should see the file's contents.<br/>

== Decide on your URI pattern ==
  I decided to expose the records as `http://localhost:8080/lcnaf/<recordID>`.  We need to do some work to make that happen.<br/>
<br/>
  Stop your tomcat<br/>
  mv `<tomcat>`/webapps/SRW `<tomcat>`/webapps/lcnaf<br/>
<br/>
  This sets the base context of the URI to lcnaf.  This can be slightly confusing as we now have a context named "lcnaf" and a database named "lcnaf", but this typically isn't a problem.  You can choose different names for the context and database.<br/>
  We now have a framework where the SRW server will respond to URLs that begin with "lcnaf".  But, the tomcat framework needs a URL pattern after the "lcnaf" context to invoke the SRW server and even then the SRW server is expecting to see an CQL query, not a bare recordID.  How do we bridge that gap?  How do we turn /lcnaf/no12345 into /lcnaf/search/lcnaf?query=identifier=no12345?  With a URL rewrite filter.  I use the OpenSource urlrewritefilter.
  Edit `<tomcat>`/webapps/lcnaf/WEB-INF/urlrewrite.xml<br/>
  The file came preconfigured to turn URIs of the form /([a-z0-9]+)/ into /search/lcnaf?query=identifier=%22$1%22.  If you've chosen a different URI pattern, then adjust the configuration file appropriately. If you've named your database something other than lcnaf, then you'll need to change that part of the rule also.<br/>

== SeeOther Redirect ==
  The 303 (SeeOther) redirect from a URI is the mechanism that tells Linked Data aware applications that they have a RealWorldObject in their hands and that the object of the redirect should support content negotiation for RDF.<br/>
The redirect is handled by the urlrewrite filter and came preconfigured in the urlrewrite.xml file.  If you chose a different URI pattern, then you may need to change the regex pattern in the configuration file.  As distributed, it will send URIs of the form /([a-z0-9]+) to /$1/.  (e.g. /no12345 to /no12345/)
== Content Negotiation ==
== Bypass Content Negotiation ==